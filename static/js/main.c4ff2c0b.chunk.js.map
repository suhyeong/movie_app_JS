{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","className","src","MovieGenre","genre","Movie","title","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sVAgCA,SAASA,EAAT,GAAqC,IAAfC,EAAc,EAAdA,OAAQC,EAAM,EAANA,IAC1B,OACI,yBAAKC,UAAU,gBAAgBC,IAAKH,EAAQC,IAAKA,IAIzD,SAASG,EAAT,GAA8B,IAATC,EAAQ,EAARA,MACjB,OACI,0BAAMH,UAAU,gBAAgBG,GAoBzBC,MArDf,YAAmD,IAAnCC,EAAkC,EAAlCA,MAAOP,EAA2B,EAA3BA,OAAQQ,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,SACnC,OACI,yBAAKP,UAAU,SACX,yBAAKA,UAAU,kBACf,kBAACH,EAAD,CAAaC,OAAQA,EAAQC,IAAKM,KAElC,yBAAKL,UAAU,kBACX,4BAAKK,GACL,yBAAKL,UAAU,iBACVM,EAAOE,KAAI,SAACL,EAAOM,GAAR,OAAkB,kBAACP,EAAD,CAAYC,MAAOA,EAAOO,IAAKD,QAEjE,uBAAGT,UAAU,mBACb,kBAAC,IAAD,CACIW,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCoCbC,E,2MAlDbC,MAAQ,G,EAQRC,cAAgB,WAUd,OATe,EAAKD,MAAME,OAAOX,KAAI,SAAAY,GACnC,OAAO,kBAAC,EAAD,CACPf,MAAOe,EAAMC,cACbvB,OAAQsB,EAAME,mBACdZ,IAAKU,EAAMG,GACXjB,OAAQc,EAAMd,OACdC,SAAUa,EAAMb,e,EAOpBiB,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLP,EADK,OAGX,EAAKQ,SAAS,CACZR,WAJS,2C,EAQbO,SAAW,WAGT,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKb,UACvBc,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,mFA/B1BG,KAAKb,e,+BAkCG,IACAL,EAAWkB,KAAKpB,MAAhBE,OACR,OACE,yBAAKnB,UAAWmB,EAAS,MAAQ,gBAC9BA,EAASkB,KAAKnB,gBAAkB,2B,GAjDvBoB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.c4ff2c0b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\n\r\n//function : dumb component(state X), class : smart component(state O)\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n            <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <p className=\"Movie__Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='4'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}) {\r\n    return (\r\n        <img className=\"Movie__Poster\" src={poster} alt={alt}></img>\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n  \n  // Render : componentWillMount() -> Render() -> componentDidMount()\n  // 원하지 않아도 이 순서로 진행함 ! -> WillMount에서 api에 작업 요청, 그 후 데이터와 관련된 작업 수행\n  // Update : componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> Render() -> componentDidUpdate()\n\n  state = {\n\n  }\n\n  componentDidMount() {\n    this._getMovies();\n  };\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie\n      title={movie.title_english}\n      poster={movie.medium_cover_image}\n      key={movie.id}\n      genres={movie.genres}\n      synopsis={movie.synopsis} />\n    })\n\n    return movies\n  }\n\n  //async : 이전 라인의 작업이 끝날 때까지 기다리지 않는다\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    //await : 뒤에 선언한 함수가 끝나기까지 기다림\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    //promise is asynchronous ! 순서 상관 없이 실행\n    //fetch가 좋은 이유는 url을 Ajax로 불러올 수 있어서 좋음 !\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : 'L o a d i n g . . .'}\n      </div>\n    );\n  };\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}